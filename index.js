// Generated by CoffeeScript 1.7.1
var Download, PLUGIN_NAME, PluginError, githubDomain, async, fs, getApmPath,
 gutil, installAtomShell, isAtomShellVersionCached, isAtomShellInstalled, isFireShellVersionCached, isFile, isDirectory, os, path, spawn, unzipAtomShell, wrench, mirrorDomain, del;

 var mkdirp = require('mkdirp').sync;

Download = require('download');

async = require('async');

fs = require('fs');

path = require('path');

os = require('os');

wrench = require('wrench');

del = require ('del');

gutil = require('gulp-util');

gulp = require('gulp');

PluginError = gutil.PluginError;

PLUGIN_NAME = "gulp-download-fire-shell";


githubDomain = 'https://github.com/fireball-x/atom-shell/releases/download/';
mirrorDomain = 'http://7u2pxz.com2.z0.glb.clouddn.com/fire-shell/';
var atomDomain = 'https://github.com/atom/electron/releases/download/';

spawn = function(options, callback) {
    var childProcess, error, proc, stderr, stdout;
    childProcess = require('child_process');
    stdout = [];
    stderr = [];
    error = null;
    proc = childProcess.spawn(options.cmd, options.args, options.opts);
    proc.stdout.on('data', function(data) {
        return stdout.push(data.toString());
    });
    proc.stderr.on('data', function(data) {
        return stderr.push(data.toString());
    });
    proc.on('error', function(processError) {
        error = error ? error : processError;
    });
    return proc.on('exit', function(code, signal) {
        var results;
        if (code !== 0) {
            error = new Error(signal);
        }
        results = {
            stderr: stderr.join(''),
            stdout: stdout.join(''),
            code: code
        };
        if (code !== 0) {
            gutil.log(PLUGIN_NAME, gutil.colors.red(results.stderr));
        }
        return callback(error, results, code);
    });
};

isFile = function(filePath) {
    return fs.existsSync(filePath) && fs.statSync(filePath).isFile;
};

isDirectory = function(dirPath) {
    return fs.existsSync(dirPath) && fs.statSync(dirPath).isDirectory();
};

getApmPath = function() {
    var apmPath;
    apmPath = path.join('apm', 'node_modules', 'atom-package-manager', 'bin', 'apm');
    if (!isFile(apmPath)) {
        apmPath = 'apm';
    }
    if (process.platform === 'win32') {
        return "" + apmPath + ".cmd";
    } else {
        return apmPath;
    }
};

isAtomShellVersionCached = function(downloadDir, version) {
    var packageName = process.platform === "darwin" ? 'Electron.app' : 'electron.exe';
    return isFile(path.join(downloadDir, version, packageName));
};

isAtomShellInstalled = function(outputDir) {
    var packageName = process.platform === "darwin" ? 'Electron.app' : 'electron.exe';
    return isDirectory(path.join(outputDir, packageName));
};

isFireShellVersionCached = function(downloadDir, version) {
    var packageName = process.platform === "darwin" ? 'Fireball.app' : 'fireball.exe';
    return isFile(path.join(downloadDir, version, packageName));
};

isNativeModuleVersionCached = function(downloadDir, version) {
    return fs.existsSync(path.join(downloadDir, version));
};

installAtomShell = function(outputDir, downloadDir, version) {
    if (isAtomShellInstalled(outputDir)) return;
    mkdirp(outputDir);
    return wrench.copyDirSyncRecursive(path.join(downloadDir, version), outputDir, {
        forceDelete: true,
        excludeHiddenUnix: false,
        inflateSymlinks: false
    });
};

unzipAtomShell = function(zipPath, callback) {
    var DecompressZip, directoryPath, unzipper;
    gutil.log(PLUGIN_NAME, 'unzipping ' + path.basename(zipPath));
    directoryPath = path.dirname(zipPath);
    if (process.platform === 'darwin') {
        var child = spawn({
            cmd: 'unzip',
            args: [zipPath, '-d', directoryPath]
        }, function(error) {
            fs.unlinkSync(zipPath);
            return callback(error);
        });
        child.stdout.on('data', function(data) {
          console.log(data.toString());
        });
        child.stderr.on('data', function(data) {
          console.error(data.toString());
        });
        return child;
    } else {
        DecompressZip = require('decompress-zip');
        unzipper = new DecompressZip(zipPath);
        unzipper.on('error', callback);
        unzipper.on('extract', function(log) {
            fs.closeSync(unzipper.fd);
            fs.unlinkSync(zipPath);
            return callback(null);
        });
        return unzipper.extract({
            path: directoryPath
        });
    }
};

module.exports = {
    downloadFireShell: function(options, cb) {
        var apm, currentAtomShellVersion, downloadDir, outputDir, rebuild, symbols, version, chinaMirror;
        if (options === null) {
            options = {};
        }
        if (!((options.version != null) && (options.outputDir != null))) {
            throw new PluginError(PLUGIN_NAME, "version and outputDir option must be given!");
        }
        version = options.version, outputDir = options.outputDir, downloadDir = options.downloadDir, symbols = options.symbols, rebuild = options.rebuild, apm = options.apm;
        version = "v" + version;
        chinaMirror = !!options.chinaMirror;
        console.log("Cache folder: " + os.tmpdir() + '\n');

        if (!downloadDir) {
            downloadDir = path.join(os.tmpdir(), 'downloaded-fire-shell');
        }
        if (!symbols) {
            symbols = false;
        }
        if (!rebuild) {
            rebuild = false;
        }
        if (!apm) {
            apm = getApmPath();
        }
        return async.series([
            function(callback) {
                if (!isFireShellVersionCached(downloadDir, version)) {
                    var filename, arch;
                    arch = (function() {
                        switch (process.platform) {
                            case 'win32':
                                return 'ia32';
                            case 'darwin':
                                return 'x64';
                            default:
                                return process.arch;
                        }
                    })();
                    filename = symbols ? "fire-shell-" + version + "-" + process.platform + "-" + arch + "-symbols.zip" : "fire-shell-" + version + "-" + process.platform + "-" + arch + ".zip";

                    var baseurl = chinaMirror ? mirrorDomain : githubDomain;
                    var url = baseurl + version + '/' + filename;
                    gutil.log("Download from: " + url);
                    var cachePath = path.join(downloadDir, version);
                    var download = new Download({
                        extract: false,
                        mode: '755'
                    }).get(url).dest(cachePath);
                    download.run(function(err, files, stream) {
                        if (err) throw err;
                        unzipAtomShell(path.join(cachePath, filename), function(error) {
                            if (error !== null) {
                                throw error;
                            } else {
                                return callback();
                            }
                        });
                    });
                } else {
                    console.log("Fire-shell " + version + " already cached in temp folder, now start copying...");
                    return callback();
                }
            },
            function(callback) {
                installAtomShell(outputDir, downloadDir, version);
                return callback();
            },
            function(callback) {
                if (rebuild) {
                    gutil.log(PLUGIN_NAME, "Rebuilding native modules for new atom-shell version " + currentVersion + ".");
                    if (apm === null) {
                        apm = getApmPath();
                    }
                    return spawn({
                        cmd: apm,
                        args: ['rebuild']
                    }, callback);
                } else {
                    return callback();
                }
            }
        ], function(error, results) {
            if (error) {
                throw new PluginError(PLUGIN_NAME, error.message);
            } else {
                return cb();
            }
        });
    },
    downloadAtomShell: function(options, cb) {
        var apm, currentAtomShellVersion, downloadDir, outputDir, rebuild, symbols, version;
        if (options === null) {
            options = {};
        }
        if (!((options.version != null) && (options.outputDir != null))) {
            throw new PluginError(PLUGIN_NAME, "version and outputDir option must be given!");
        }
        version = options.version, outputDir = options.outputDir, downloadDir = options.downloadDir, symbols = options.symbols, rebuild = options.rebuild, apm = options.apm;
        version = "v" + version;
        if (!downloadDir) {
            downloadDir = path.join(os.tmpdir(), 'downloaded-atom-shell');
            console.log("Download atom shell to cached folder: " + downloadDir);
        }
        if (!symbols) {
            symbols = false;
        }
        if (!rebuild) {
            rebuild = false;
        }
        if (!apm) {
            apm = getApmPath();
        }
        //currentAtomShellVersion = getCurrentAtomShellVersion(outputDir);
        //if (currentAtomShellVersion === version) {
        //  return cb();
        //}
        return async.series([
            function(callback) {
                if (!isAtomShellVersionCached(downloadDir, version) &&
                    !isAtomShellInstalled(outputDir)) {
                  var filename, arch;
                  arch = (function() {
                      switch (process.platform) {
                          case 'win32':
                              return 'ia32';
                          case 'darwin':
                              return 'x64';
                          default:
                              return process.arch;
                      }
                  })();
                  filename = symbols ? "electron-" + version + "-" + process.platform + "-" + arch + "-symbols.zip" : "electron-" + version + "-" + process.platform + "-" + arch + ".zip";
                  var baseurl = atomDomain;
                  var url = baseurl + version + '/' + filename;
                  gutil.log("Download from: " + url);
                  var cachePath = path.join(downloadDir, version);
                  var download = new Download({
                      extract: false,
                      mode: '755'
                  }).get(url).dest(cachePath);
                  download.run(function(err, files, stream) {
                      if (err) throw err;
                      unzipAtomShell(path.join(cachePath, filename), function(error) {
                          if (error !== null) {
                              throw error;
                          } else {
                              return callback();
                          }
                      });
                  });
                } else {
                    return callback();
                }
            },
            function(callback) {
                installAtomShell(outputDir, downloadDir, version);
                return callback();
            },
            function(callback) {
                if (rebuild && currentAtomShellVersion !== version) {
                    gutil.log(PLUGIN_NAME, "Rebuilding native modules for new atom-shell version " + currentVersion + ".");
                    if (apm === null) {
                        apm = getApmPath();
                    }
                    return spawn({
                        cmd: apm,
                        args: ['rebuild']
                    }, callback);
                } else {
                    return callback();
                }
            }
        ], function(error, results) {
            if (error) {
                throw error;
            } else {
                return cb();
            }
        });
    },
    downloadNativeModules: function(options, cb) { //options: {version,outputDir,nativeModules,isFireShell}
        var downloadDir, outputDir, version, nativeModules, isFireShell, chinaMirror;
        if (options == null) {
            options = {};
        }
        if (!((options.version != null) && (options.outputDir != null) && (options.nativeModules != null))) {
            throw new PluginError(PLUGIN_NAME, "version and outputDir option must be given!");
        }
        if (!downloadDir) {
            downloadDir = path.join(os.tmpdir(), 'downloaded-native-modules');
        }
        isFireShell = !!options.isFireShell;
        console.log('Download to cache folder: ' + downloadDir);
        chinaMirror = !!options.chinaMirror;
        version = 'v' + options.version;
        outputDir = options.outputDir;
        nativeModules = options.nativeModules;

        return async.series([
            function(callback) {
                if (!isNativeModuleVersionCached(downloadDir, version)) {
                    var filename = process.platform === "win32" ? "native-modules-" + version + "-" + process.platform + (isFireShell ? "-fire" : "-atom") + ".zip" : "native-modules-" + version + "-" + process.platform + ".zip";
                    var baseurl = chinaMirror ? mirrorDomain : githubDomain;
                    var url = baseurl + version + '/' + filename;
                    gutil.log("Download from mirror in china: " + url);
                    var cachePath = path.join(downloadDir, version);
                    var download = new Download({
                        extract: false,
                        mode: '755'
                    }).get(url).dest(cachePath);
                    download.run(function(err, files, stream) {
                        if (err) throw err;
                        unzipAtomShell(path.join(cachePath, filename), function(error) {
                            if (error !== null) {
                                throw error;
                            } else {
                                return callback();
                            }
                        });
                    });
                } else {
                    console.log("Native modules for " + version + " already cached in temp folder, now start copying...");
                    return callback();
                }
            },
            function(callback) {
                nativeModules.forEach(function(modulePath) {
                    wrench.copyDirSyncRecursive(path.join(downloadDir, version, modulePath), path.join(outputDir, modulePath), {
                        forceDelete: true,
                        excludeHiddenUnix: false,
                        inflateSymlinks: false
                    });
                });
                return callback();
            }
        ], function(error, results) {
            if (error) {
                throw new PluginError(PLUGIN_NAME, error.message);
            } else {
                return cb();
            }
        });
    },
    clearCachedDownloads: function(options, cb) {
        if (options === null) {
            options = {};
        }
        if (options.versionAtom === null || options.versionFire === null) {
            throw new PluginError(PLUGIN_NAME, "version option must be given!");
        }
        var versionAtom = 'v' + options.versionAtom;
        var versionFire = 'v' + options.versionFire;
        var folderNames = ['downloaded-fire-shell', 'downloaded-atom-shell', 'downloaded-native-modules'];
        var folderPaths = folderNames.map(function(folder) {
          var version = folder.indexOf('atom') !== -1 ? versionAtom : versionFire;
          return path.join(os.tmpdir(), folder, version);
        });
        console.log("Deleting " + folderPaths);
        del(folderPaths, {
          force: true
        }, function() {
          console.log("Fire-shell and Native module downloaded cache cleared!");
          cb();
        });
        // wrench.rmdirSyncRecursive(path.join(downloadShellDir, version));
        // wrench.rmdirSyncRecursive(path.join(downloadModuleDir, version));
    }
};
